#+TITLE: メッセージブローカの引数と使用方法
#+AUTHOR: 中川 雄介
#+EMAIL: nakagawa2020@s.okayama-u.ac.jp
#+DATE: 2022-01-19
#+OPTIONS: H:3 num:1 toc:nil
#+OPTIONS: ^:nil @:t \n:nil ::t |:t f:t TeX:t
#+OPTIONS: skip:nil
#+OPTIONS: author:t
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: timestamps:nil
#+OPTIONS: d:nil
#+OPTIONS: tags:t
#+TEXT:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: ja
#+LATEX_CLASS: jsarticle
#+LATEX_CLASS_OPTIONS: [a4j,dvipdfmx]
#+LATEX_HEADER: \usepackage{plain-article}
#+LATEX_HEADER: \usepackage{pxjahyper}
# #+LATEX_HEADER: \renewcommand\maketitle{}
# #+LATEX_HEADER: \pagestyle{empty}
# #+LaTeX: \thispagestyle{empty}

* はじめに
  中川が作成したメッセージブローカの実験用スクリプトの引数と使用方法について，以下に述べる．

* 引数の詳細
  以下にスクリプトの引数の詳細について述べる．

** test.sh
*** 書式
    : test.sh [-c MSGS] [-p PORT_NUMBER] [-m COMMUNICATION_METHOD] [-sl SEND_LANGUAGE] [-sw SEND_WINDOWSIZE] [-rl RECV_LANGUAGE] [-rw RECV_WINDOWSIZE] [-bl BROKER_LANGUAGE]
*** 説明
    センダ，レシーバおよび，メッセージブローカを各パラメータを指定して実行．
*** オプション
    + =-c MSGS= :: 送信するメッセージの個数 (default: 100)
    + =-p PORT_NUMBER= :: サーバとクライアントで使用するホスト名とポートの指定 (default: localhost:3000)
    + =-m COMMUNICATION_METHOD= :: 通信方法の指定．TCP かgRPC を選択する．(default:TCP)
    + =-sl SEND_LANGUAGE= :: センダの実行言語の指定．C かRuby を選択する． (default: C)
    + =-sw SEND_WINDOWSIZE= :: センダのウィンドウサイズの指定 (default: 1)
    + =-rl RECV_LANGUAGE= :: レシーバの実行言語の指定． C かRuby を選択する．(default: C)
    + =-rw RECV_WINDOWSIZE= :: レシーバのウィンドウサイズの指定 (default: 1)
    + =-bl BROKER_LANGUAGE= :: メッセージブローカの実行言語の選択 (default: C)
*** 使用例
    1) localhost:8888 で通信方式にgRPC を用いてメッセージを 1000個送信．
       : test.sh -c 1000 -p localhost:8888 -m gRPC
    2) センダの実行言語をRuby ，ウィンドウサイズ10で実行．
       : test.sh -sl Ruby -sw 10

* メッセージ (パケット)
** フォーマット
  本実験システムでは，以下のような固定長のメッセージフォーマットを採用している．
  #+begin_src c
    #define MSG_PAYLOAD_LEN 1024
    #define MSG_HEADER_LEN  (sizeof(struct message_header))
    #define MSG_TOTAL_LEN   (MSG_HEADER_LEN + MSG_PAYLOAD_LEN)

    struct message_header {
      uint32_t msg_type; // RECV_N_REQUEST, SEND_N_REQUEST
      uint32_t fragments;  //fragments
      uint32_t saddr; //source address
      uint32_t daddr; //destination address
      uint64_t sender_send_time;
      uint64_t server_recv_time;
      uint64_t server_send_time;
      uint64_t recver_recv_time;
    };

    struct ack_header {
      uint32_t msg_type; // RECV_N_REQUEST, SEND_N_REQUEST
      uint32_t ws;  //window size
      uint32_t saddr; //source address
      uint32_t daddr; //destination address
      uint64_t sender_send_time;
      uint64_t server_recv_time;
      uint64_t server_send_time;
      uint64_t recver_recv_time;
    };

    struct message {
      struct message_header hdr;
      char payload[MSG_PAYLOAD_LEN];
    };

    struct ack_message {
      struct ack_header hdr;
      char payload[MSG_PAYLOAD_LEN];
    };

  #+end_src
  =MSG_PAYLOAD_LEN= (固定長) がメッセージの長さを表している．メッセージの種類 (ACK であっても) によって変化しない．ただし，ACKとメッセージでヘッダーが異なる．

** メッセージタイプ
   現状，以下のように定義されている．
   #+begin_src c
    #define SEND_MSG 1      // sender -> server (+payload)
    #define SEND_MSG_ACK 2  // sender -> server (+payload) then sender wait ack
    #define SEND_ACK 3      // server -> sender

    #define RECV_N_REQ 3    // receiver -> server
    #define RECV_MSG 4      // server -> receiver (+payload)
    #define RECV_ACK 6      // receiver -> server

    #define HELLO_REQ 7     // client -> server
    #define HELLO_ACK 8     // server -> client
   #+end_src
