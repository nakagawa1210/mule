#+TITLE: メッセージブローカの引数と使用方法
#+AUTHOR: 中川 雄介
#+EMAIL: nakagawa2020@s.okayama-u.ac.jp
#+DATE: 2022-01-19
#+OPTIONS: H:3 num:1 toc:nil
#+OPTIONS: ^:nil @:t \n:nil ::t |:t f:t TeX:t
#+OPTIONS: skip:nil
#+OPTIONS: author:t
#+OPTIONS: email:nil
#+OPTIONS: creator:nil
#+OPTIONS: timestamp:nil
#+OPTIONS: timestamps:nil
#+OPTIONS: d:nil
#+OPTIONS: tags:t
#+TEXT:
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE: ja
#+LATEX_CLASS: jsarticle
#+LATEX_CLASS_OPTIONS: [a4j,dvipdfmx]
#+LATEX_HEADER: \usepackage{plain-article}
#+LATEX_HEADER: \usepackage{pxjahyper}
# #+LATEX_HEADER: \renewcommand\maketitle{}
# #+LATEX_HEADER: \pagestyle{empty}
# #+LaTeX: \thispagestyle{empty}

* はじめに
  作成したメッセージブローカの引数と使用方法について，以下に述べる．

* 引数の詳細
  以下に各プログラムの引数の詳細について述べる．

** send_client
*** 書式
    : send_client [COUNT] [WINDOW_SIZE] [HOST_NAME] [PORT_NUMBER]
*** 説明
    *COUNT* でメッセージ送信回数を指定する．
    *WINDOW_SIZE* で指定された回数メッセージを送信する毎に応答メッセージを受信する．
    *HOST_NAME* で指定したホストと通信する．
    *PORT_NUMBER* で指定したポートで通信する．
*** 使用例
    1) localhost ポート10005，WS100でメッセージを 1000個送信．
       : send_client 1000 100 localhost 10005

** recv_client
*** 書式
    : recv_client [COUNT] [WINDOW_SIZE] [HOST_NAME] [PORT_NUMBER]
*** 説明
    *COUNT* でメッセージ受信回数を指定する．
    *WINDOW_SIZE* で指定された回数メッセージを受信する毎に応答メッセージを送信する．
    *HOST_NAME* で指定したホストと通信する．
    *PORT_NUMBER* で指定したポートで通信する．
*** 使用例
    1) localhost ポート10005，WS100でメッセージを 1000個受信．
       : recv_client 1000 100 localhost 10005

** server
*** 書式
    : server [PORT_NUMBER]
*** 説明
    ブローカーを起動して *PORT* で待ち受ける．
*** 使用例
    1) 10005 ポートでサーバを起動する．
       : server 10005

* メッセージ (パケット)
** フォーマット
  本実験システムでは，以下のような固定長のメッセージフォーマットを採用している．
  #+begin_src c
    #define MSG_PAYLOAD_LEN 1024
    #define MSG_HEADER_LEN  (sizeof(struct message_header))
    #define MSG_TOTAL_LEN   (MSG_HEADER_LEN + MSG_PAYLOAD_LEN)

    struct message_header {
      uint32_t tot_len;  // total length including payload
      uint32_t msg_type; // RECV_N_REQUEST, SEND_N_REQUEST
      uint32_t fragments;  //fragments
      uint32_t saddr; //source address
      uint32_t daddr; //destination address
      uint64_t sender_send_time;
      uint64_t server_recv_time;
      uint64_t server_send_time;
      uint64_t recver_recv_time;
    };

    struct ack_header {
      uint32_t tot_len;  // total length including payload
      uint32_t msg_type; // RECV_N_REQUEST, SEND_N_REQUEST
      uint32_t ws;  //window size
      uint32_t saddr; //source address
      uint32_t daddr; //destination address
      uint64_t sender_send_time;
      uint64_t server_recv_time;
      uint64_t server_send_time;
      uint64_t recver_recv_time;
    };

    struct message {
      struct message_header hdr;
      char payload[MSG_PAYLOAD_LEN];
    };

    struct ack_message {
      struct ack_header hdr;
      char payload[MSG_PAYLOAD_LEN];
    };

  #+end_src
  =MSG_PAYLOAD_LEN= (固定長) がメッセージの長さを表している．メッセージの種類 (ACK であっても) によって変化しない．ただし，ACKとメッセージでヘッダーが異なる．

** メッセージタイプ
   現状，以下のように定義されている．
   #+begin_src c
    #define SEND_MSG 1      // sender -> server (+payload)
    #define SEND_MSG_ACK 2  // sender -> server (+payload) then sender wait ack 
    #define SEND_ACK 3      // server -> sender

    #define RECV_N_REQ 3    // receiver -> server
    #define RECV_MSG 4      // server -> receiver (+payload)
    #define RECV_ACK 6      // receiver -> server

    #define HELLO_REQ 7     // client -> server
    #define HELLO_ACK 8     // server -> client
   #+end_src

* 利用例
  test.sh を用いて実験を行うことができる．
** 書式
  : test.sh [COUNT] [WINDOW_SIZE] [HOST_NAME] [PORT_NUMBER] [FILE_NAME]
** 説明
  *FILE_NAME* はlog ディレクトリ以下に保存されるログのファイル名の一部である．
  作成されるログのファイル名は以下のようになる．
  : [FILE_NAME][COUNT]_[WINDOW_SIZE]_<YEAR><MONTH><DAY>_<TIME>.log
  
